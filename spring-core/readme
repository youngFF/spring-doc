spring-core


说明：spring-core主要学习的知识点有：

知识点1：

    1.了解并掌握spring IOC 和 spring bean的概念
    2.使用xml的方式配置bean
    3.bean的依赖性
    4.bean的作用域
    5.bean的生命周期

知识点2：

   1.了解spring容器怎么抽象资源

知识点3：

    1.spring AOP

-------------------------------------------------------------
学习路线：

第一章：

1.创建Spring容器：参考ApplicationContextTest.createSpringContainerTest
2.配置bean ：参考config/app-config.xml中Customer的配置
            参考ApplicationContextTest.beanDefinitionTest

3.constructor-base DI，通过java构造函数设置bean依赖
        参考：config/app-config.xml中anotherCustomer的配置

  说明：constructor-base DI是通过构造函数参数类型匹配进行依赖设置的

4.bean依赖注入过程
    1.实例化，bean的无参构造函数(constructor with no-args)，或者bean的
    有参构造函数(constructor with args)
    2.setter注入，调用setter方法 ,注意：如果第一步有参构造函数已经注入了bean的所需依赖，
    不需要setter注入

4.depends-on属性：
    参考：config/app-config.xml中thirdCustomer的配置
    参考：ApplicationContextTest.dependsOnTest

5.autowire类型constructor
    参数：ApplicationContextTest.autowireByConstructorTest

6.bean作用域
    scope
    prototype
    request
    session
    application
    websocket

    参考：BeanScopeTest


7.BeanPostProcessor接口：
    参考：BeanProcessorTest.beanPostProcessorTest


第二章：
1.Spring Resource
Topic :
        introduction
        the Resource interface
        built-in Resource implementation
        ResourceLoader
        ResourceLoaderAware
        Resources as Dependencies
        Application Contexts and resource paths

2.每个类的使用方式
    参考:com.hyena.spring.core.resource.SpringResourcesTest


第三章：Validation , data binding and type conversion

introduction:

Validation:
there are props and cons for considering validation as business logic, and spring offers
a design for validation(and data binding) that does not exclude either of them . specifically,
validation should not be tied to the web tier and should be easy to localize . and it should be possible to
plugin any available validator. considering these concerns , spring has come up with a
Validator interface that is both basic and eminently(特别) usable in any layer of an application

DataBinding

data binding is useful for letting user input be dynamically bound to the domain model of an
application .

BeanWrapper

the BeanWrapper is fundamental concept in the spring framework and is used in a lot
of places.




3。1 validation by using spring's validator interface // 使用spring验证接口

ValidationUtils.rejectIfEmpty(Errors errors, String field, String errorCode)

Reject the given field with given error code if the value is empty.
An 'empty' value in this context means either null or the empty string "".
the object whose field is being validated does not need to be passed in because
the Errors instance can resolve field values by itself(it will usually hold an internal reference to
the target object).

Parameters:
    errors - the Errors instance to register errors on
    field - the field name to check
    errorCode - the error code, interpretable as message key



3.2 data binding


3.3 type conversion




